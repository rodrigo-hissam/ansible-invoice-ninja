---

- name: Deploy Invoice Ninja
  hosts: ininja

  
  vars:
    user: '{{ ansible_user_id }}'
    app_user: ininja_user
    app_name: ininja
    app_user_password: "p5#rJF1LRPxFmyDSYEoxtez7"
    webdir: /var/www
    hostname: '{{ ansible_hostname }}'
    nginx_deb_repo_enabled: true
    nginx_deb_repo_key_url: 'https://nginx.org/keys/nginx_signing.key'
    nginx_deb_repo_url: 'deb http://nginx.org/packages/{{ansible_distribution | lower}}/ {{ansible_distribution_release}} nginx'
    mariadb_deb_repo_enabled: true
    mariadb_deb_repo_url: 'deb [arch=amd64] http://mirrors.accretive-networks.net/mariadb/repo/10.1/{{ansible_distribution | lower }} {{ansible_distribution_release}} main'
    mariadb_root_pwd: 'romo13.23'
    php_executable: 'php'
    composer_path: '/usr/local/bin/composer'
    ssl_cert_country: "MX"
    ssl_cert_locality: "Guadalajara"
    ssl_cert_state: "Jalisco"
    ssl_cert_common_name: "ansible_fqdn"
    ssl_cert_days: "365"
    ssl_cert_organization: "Company"
    ssl_cert_fields: "/C={{ssl_cert_country}}/ST={{ssl_cert_state}}/L={{ssl_cert_locality}}/O={{ssl_cert_organization}}/CN={{ssl_cert_common_name}}"
  

  tasks:
    # Nginx
    - name: Importing nginx key
      apt_key:
        url: '{{nginx_deb_repo_key_url}}'
        state: present
      become: true
      register: nginx_repo_key_added
      when: nginx_deb_repo_enabled

    - name: Adding nginx repo
      apt_repository: 
        repo: '{{nginx_deb_repo_url}}'
        state: present
        filename: 'nginx'
      become: true
      when: nginx_deb_repo_enabled
        
    - name: Ensure nginx is installed
      apt:
        name: nginx
        state: installed
      become: true
      

    - name: Starting nginx.service and enabling it at boot
      service: 
        name: nginx
        state: started
        enabled: yes
      become: true
      
    
    #- name: Copying nginx conf file

    # MariaDB
    - name: Importing mariadb key
      apt_key:
        keyserver: 'hkp://keyserver.ubuntu.com:80'
        id: '0xF1656F24C74CD1D8'
      become: true
      register: mariadb_repo_key_added
      when: mariadb_deb_repo_enabled

    - name: Adding mariadb repo
      apt_repository: 
        repo: '{{mariadb_deb_repo_url}}'
        state: present
        filename: 'mariadb-10.1'
      become: true
      when: mariadb_deb_repo_enabled

    - name: Ensuring mariadb packages are installed
      apt:
        name: '{{ item }}'
        state: installed
        update_cache: yes
      become: true
      with_items:
        - mariadb-common
        - mariadb-server
        - python-mysqldb

    - name: Starting mariadb.service and enabling it at boot
      service: 
        name: mariadb
        state: started
        enabled: true
      become: true

    # MySQL server install with default login_user of 'root' and no password. To secure this
    # user as part of an idempotent playbook, you must create at leaset two tasks: the first
    # must change the root user's password, without providing any login_user/login_password
    # details. The second must drop a ~/.my.cnf file containing the new root credentials.
    # Subsequent runs of the playbook will then succeed by reading the new credentials from
    # this file.

    # 1st task - updating mariadb root user.
    - name: Updating root password for all accounts
      mysql_user:
        name: root
        host: '{{ item }}'
        password: '{{ mariadb_root_pwd }}'
      with_items:
        - 127.0.0.1
        - ::1
        - localhost
      become: true

    # 2nd task - copying .my.cnf template to /root/
    - name: Copying .my.cnf with root passwords
      template:
        src: my.cnf.j2
        dest: /root/.my.cnf 
        owner: root
        group:
        mode: 0644
      become: true

    # Securing steps for Mariadb 
    - name: Deleting Mariadb anonymous users for all accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
      become: true

    - name: Disallow remote root login
      command: 'mysql -NBe "{{ item }}"'
      with_items:
        - DELETE FROM mysql.user WHERE User= 'root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
      changed_when: false
      become: true

    - name: Removing the Mariadb test database
      mysql_db:
        name: 'test'
        state: absent
      become: true
    
    # PHP dependencies
    - name: Installing PHP 7.0 and its required extensions
      apt:
        name: '{{ item }}'
        state: installed
        update_cache: yes
      with_items:
        - curl
        - wget
        - php7.0
        - php7.0-fpm
        - php7.0-mysql
        - php7.0-mcrypt
        - php7.0-gd
        - php7.0-curl
        - php7.0-mbstring
        - php7.0-zip
        - php7.0-gmp
        - php7.0-xml
      become: true
      
    - name: Setting cgi.fix_pathinfo=0
      lineinfile:
        # use path instead of dest if ansible >= 2.3
        dest: '/etc/php/7.0/fpm/php.ini'
        regexp: '^;cgi.fix_pathinfo=1$'
        state: present
        line: 'cgi.fix_pathinfo=0'
        backrefs: yes
      become: true
      notify:
        - restart php-fpm

    - name: Checking if composer is installed
      stat: 
        path: '{{composer_path}}'
      register: composer_installed

    - name: Downloading the composer installer 
      get_url:
        url: 'https://getcomposer.org/installer'
        dest: '/tmp/composer-installer.php'
        mode: 0755
      when: not composer_installed.stat.exists

    - name: Running composer installer
      command: "'{{php_executable}}' composer-installer.php" 
      args:
        chdir: /tmp
      when: not composer_installed.stat.exists

    - name: Moving composer into our path
      command: "mv /tmp/composer.phar '{{composer_path}}' "
      args:
        creates: '{{composer_path}}'
      when: not composer_installed.stat.exists
      become: true

    # Invoice Ninja
    - name: Installing git 
      apt:
        name: git
        state: installed
      become: True

    
    - name: Setting Invoice Ninja root folder permissions
      file: 
        dest: /var/www/{{app_name}}
        state: directory
        recurse: yes
        owner: "{{user}}"
        group: www-data
        mode: 0750
      become: true

    - name: Cloning Invoice Ninja git repo
      git:
        repo: https://github.com/invoiceninja/invoiceninja.git
        clone: yes
        dest: /var/www/{{app_name}}
        update: no
      

    - name: Downloading Invoice Ninja dependencies via composer
      composer:
        command: install 
        no_dev: no
        optimize_autoloader: yes
        working_dir: /var/www/{{app_name}}

    - name: Creating db for Invoice Ninja
      mysql_db:
        name: "{{app_name}}"
        state: present
      become: yes

    - name: Creating user for Invoice Ninja db
      mysql_user:
        name: "{{ app_user}}"
        password: "{{app_user_password}}"
        priv: '{{app_name}}.*:ALL'
        state: present
      become: yes
      register: db_user_passwd
    
    - name: Setting Invoice Ninja .env config
      template:
        src: env.j2
        dest: "{{ webdir }}/{{app_name}}/.env"
        owner: "{{user}}"
        group: www-data
        mode: 0750
      become: true
      register: env

    - name: Running Invoice Ninja initial db migration
      shell: php artisan migrate --force
      args:
        chdir: "{{webdir}}/{{ansible_hostname}}"
      when: env.changed
      tags:
        - deployment
      

    - name: Seeding Invoice Ninja db
      shell: php artisan db:seed
      args:
        chdir: "{{webdir}}/{{ansible_hostname}}"
      when: env.changed
      tags:
        - deployment

    - name: Creating a new php-fpm pool for user
      template:
        src: fpm-pool.conf.j2
        dest: /etc/php/7.0/fpm/pool.d/{{ansible_fqdn}}.conf
        owner: "{{user}}"
        group: "{{user}}"
        mode: 0660
      become: true
      notify:
        - restart php-fpm


# Handlers
  handlers:
    - name: restart nginx
      service: 
        name: nginx
        state: restarted
      become: true

    - name: reload nginx
      service: 
        name: nginx
        state: reloaded
      become: true

    - name: restart mariadb
      service:
        name: mariadb
        state: restarted
        sleep: 5
      become: true

    - name: restart php-fpm
      service:
        name: php7.0-fpm
        state: restarted
      become: true
